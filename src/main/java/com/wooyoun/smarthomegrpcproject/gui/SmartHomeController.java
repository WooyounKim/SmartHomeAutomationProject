/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.wooyoun.smarthomegrpcproject.gui;

/**
 *
 * @author wuyeonkim
 */

// gRPC core
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

// Lighting
import lighting.LightingInput;
import lighting.LightingDecision;
import lighting.LightingServiceGrpc;

// Climate
import climate.ClimateRequest;
import climate.ClimateStatus;
import climate.ClimateServiceGrpc;

// Security
import security.SecurityEvent;
import security.SecurityResponse;
import security.SecurityServiceGrpc;

// Discovery
import discovery.ServiceQuery;
import discovery.ServiceInfo;
import discovery.DiscoveryServiceGrpc;

// Common
import common.AuthInfo;

// Java
import java.util.Iterator;


public class SmartHomeController extends javax.swing.JFrame {

    /**
     * Creates new form SmartHomeController
     */
    public SmartHomeController() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        deviceIdTextField = new javax.swing.JTextField();
        deviceIdLabel = new javax.swing.JLabel();
        apiKeyLabel = new javax.swing.JLabel();
        apiKeyTextField = new javax.swing.JTextField();
        lightingButton = new javax.swing.JButton();
        climateButton = new javax.swing.JButton();
        securityButton = new javax.swing.JButton();
        discoverButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setText("Smart Home Controller");

        deviceIdTextField.setColumns(15);
        deviceIdTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deviceIdTextFieldActionPerformed(evt);
            }
        });

        deviceIdLabel.setText("Device ID: ");

        apiKeyLabel.setText("API Key: ");

        apiKeyTextField.setColumns(15);
        apiKeyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apiKeyTextFieldActionPerformed(evt);
            }
        });

        lightingButton.setText("Call Lighting Service");
        lightingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightingButtonActionPerformed(evt);
            }
        });

        climateButton.setText("Call Climate Service");
        climateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                climateButtonActionPerformed(evt);
            }
        });

        securityButton.setText("Call Security Service");
        securityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securityButtonActionPerformed(evt);
            }
        });

        discoverButton.setText("Discovery Services");
        discoverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discoverButtonActionPerformed(evt);
            }
        });

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        jScrollPane1.setViewportView(resultTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(apiKeyLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(apiKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(deviceIdLabel)
                            .addGap(23, 23, 23)
                            .addComponent(deviceIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(titleLabel)
                            .addGap(9, 9, 9))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(securityButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(discoverButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lightingButton)
                        .addGap(44, 44, 44)
                        .addComponent(climateButton))
                    .addComponent(jScrollPane1))
                .addContainerGap(120, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(deviceIdLabel)
                                    .addComponent(deviceIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(apiKeyLabel))
                            .addComponent(apiKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(133, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lightingButton)
                            .addComponent(climateButton))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discoverButton)
                    .addComponent(securityButton))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void apiKeyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apiKeyTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apiKeyTextFieldActionPerformed

    private void lightingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lightingButtonActionPerformed
       String deviceId = deviceIdTextField.getText().trim();
    String apiKey = apiKeyTextField.getText().trim();

    ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
            .usePlaintext()
            .build();

    LightingServiceGrpc.LightingServiceStub stub = LightingServiceGrpc.newStub(channel);

    StreamObserver<LightingInput> requestObserver = stub.configureLighting(new StreamObserver<LightingDecision>() {
        @Override
        public void onNext(LightingDecision value) {
            resultTextArea.append("Lighting Decision: " + value.getLightingMode() + " - " + value.getReason() + "\n");
        }

        @Override
        public void onError(Throwable t) {
            resultTextArea.append("Lighting Error: " + t.getMessage() + "\n");
        }

        @Override
        public void onCompleted() {
            resultTextArea.append("Lighting stream completed.\n");
        }
    });

    LightingInput input = LightingInput.newBuilder()
            .setSensorType("motion")
            .setValue("present")
            .setTimestamp(String.valueOf(System.currentTimeMillis()))
            .setAuth(AuthInfo.newBuilder().setApiKey(apiKey).build())
            .build();

    requestObserver.onNext(input);
    requestObserver.onCompleted();
    }//GEN-LAST:event_lightingButtonActionPerformed

    private void climateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_climateButtonActionPerformed
        // TODO add your handling code here:
  String deviceId = deviceIdTextField.getText().trim();
    String apiKey = apiKeyTextField.getText().trim();

    ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50052)
            .usePlaintext()
            .build();

    ClimateServiceGrpc.ClimateServiceBlockingStub stub = ClimateServiceGrpc.newBlockingStub(channel);

    ClimateRequest request = ClimateRequest.newBuilder()
            .setDeviceId(deviceId)
            .setAuth(AuthInfo.newBuilder().setApiKey(apiKey).build())
            .build();

    try {
        Iterator<ClimateStatus> responses = stub.streamClimateStatus(request);
        while (responses.hasNext()) {
            ClimateStatus status = responses.next();
            resultTextArea.append("Climate Update - Temp: " + status.getTemperature() +
                    "°C, Humidity: " + status.getHumidity() + "% @ " + status.getTimestamp() + "\n");
        }
    } catch (Exception e) {
        resultTextArea.append("Climate Error: " + e.getMessage() + "\n");
    }
    }//GEN-LAST:event_climateButtonActionPerformed

    private void securityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_securityButtonActionPerformed
        // TODO add your handling code here:
    String deviceId = deviceIdTextField.getText().trim();
    String apiKey = apiKeyTextField.getText().trim();

    ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50053)
            .usePlaintext()
            .build();

    SecurityServiceGrpc.SecurityServiceStub stub = SecurityServiceGrpc.newStub(channel);

    StreamObserver<SecurityEvent> requestObserver = stub.monitorSecurity(new StreamObserver<SecurityResponse>() {
        @Override
        public void onNext(SecurityResponse value) {
            resultTextArea.append("Security Response: " + value.getAction() + " - " + value.getMessage() + " @ " + value.getTimestamp() + "\n");
        }

        @Override
        public void onError(Throwable t) {
            resultTextArea.append("Security Error: " + t.getMessage() + "\n");
        }

        @Override
        public void onCompleted() {
            resultTextArea.append("Security stream completed.\n");
        }
    });

    SecurityEvent event = SecurityEvent.newBuilder()
            .setDeviceId(deviceId)
            .setEventType("motion")
            .setTimestamp(String.valueOf(System.currentTimeMillis()))
            .setAuth(AuthInfo.newBuilder().setApiKey(apiKey).build())
            .build();

    requestObserver.onNext(event);
    requestObserver.onCompleted();
    }//GEN-LAST:event_securityButtonActionPerformed

    private void discoverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discoverButtonActionPerformed
        // TODO add your handling code here:
     String serviceName = deviceIdTextField.getText().trim();
    String apiKey = apiKeyTextField.getText().trim();

    ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50054)
            .usePlaintext()
            .build();

    DiscoveryServiceGrpc.DiscoveryServiceBlockingStub stub = DiscoveryServiceGrpc.newBlockingStub(channel);

    ServiceQuery query = ServiceQuery.newBuilder()
            .setServiceName(serviceName)
            .setAuth(AuthInfo.newBuilder().setApiKey(apiKey).build())
            .build();

    try {
        ServiceInfo info = stub.findService(query);
        resultTextArea.append("Discovered Service:\n");
        resultTextArea.append(" - Name: " + info.getServiceName() + "\n");
        resultTextArea.append(" - Host: " + info.getHost() + "\n");
        resultTextArea.append(" - Port: " + info.getPort() + "\n");
        resultTextArea.append(" - Description: " + info.getDescription() + "\n");
    } catch (Exception e) {
        resultTextArea.append("Discovery Error: " + e.getMessage() + "\n");
    }
    }//GEN-LAST:event_discoverButtonActionPerformed

    private void deviceIdTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deviceIdTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deviceIdTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
public static void main(String args[]) {
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (Exception ex) {
        java.util.logging.Logger.getLogger(SmartHomeController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new SmartHomeController().setVisible(true);
        }
    });
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apiKeyLabel;
    private javax.swing.JTextField apiKeyTextField;
    private javax.swing.JButton climateButton;
    private javax.swing.JLabel deviceIdLabel;
    private javax.swing.JTextField deviceIdTextField;
    private javax.swing.JButton discoverButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lightingButton;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JButton securityButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
